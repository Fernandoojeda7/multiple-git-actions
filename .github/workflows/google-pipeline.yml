name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - feature/*
      - bugfix/*
      - hotfix/*
      - release/*
    tags: # La clave 'tags' debe estar aquí para desencadenar el flujo de trabajo cuando se creen etiquetas
      - "v*.*.*"

  pull_request:
    branches:
      - feature/*
      - bugfix/*
      - hotfix/*
      - release/*

env:
  GAR_LOCATION: europe-north1
  GKE_CLUSTER: multi-actions
  GKE_ZONE: europe-north1
  DEPLOYMENT_NAME: equipzilla-deployment
  GKE_REPO: Equipzilla
  IMAGE: equipzilla
  IMAGE_TAG: test

jobs:
  setup-build-publish-deploy:
    name: Configurar, Compilar, Publicar y Desplegar
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Utilizar Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: git checkout
        uses: actions/checkout@v3

      - id: auth
        name: Autenticar en Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Crear el repositorio en Artifact Registry
      - name: Crear repositorio en Artifact Registry
        run: |
          gcloud artifacts repositories create $GAR_REPO --repository-format=docker --location=$GKE_ZONE

      - name: Obtener credenciales de Kubernetes
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE --project $PROJECT_ID

      - name: Configurar credenciales de GKE
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Autenticación en Docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Construir la imagen de Docker
      - name: Compilar
        run: |-
          docker build \
          --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$GKE_REPO/$IMAGE:$IMAGE_TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Publicar la imagen de Docker en Docker Hub
      - name: Publicar
        run: |-
          docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$GKE_REPO/$IMAGE:$IMAGE_TAG"

      # # Desplegar la imagen de Docker en el clúster de GKE
      # - name: Desplegar
      #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      #   run: |-
      #     kubectl apply -f app.yaml
      #     kubectl apply -f service-node.yaml
      #     kubectl apply -f basic-ingress.yaml
      #     kubectl rollout status deployment/$DEPLOYMENT_NAME
      #     kubectl get services -o wide
