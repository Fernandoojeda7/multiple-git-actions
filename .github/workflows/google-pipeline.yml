name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - feature/*
      - bugfix/*
      - hotfix/*
      - release/*
    tags: # La clave 'tags' debe estar aquí para desencadenar el flujo de trabajo cuando se creen etiquetas
      - "v*.*.*"

  pull_request:
    branches:
      - feature/*
      - bugfix/*
      - hotfix/*
      - release/*

jobs:
  setup-build-publish-deploy:
    name: Configurar, Compilar, Publicar y Desplegar
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Utilizar Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: git checkout
        uses: actions/checkout@v3

      - name: Cargar variables de entorno desde el archivo .env
        run: |
          echo "Cargando variables de entorno desde el archivo .env"
          source ../../.env

      - id: auth
        name: Autenticar en Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Verificar si el repositorio de artefactos ya existe
        id: check_repo_exists
        run: |
          gcloud artifacts repositories describe equipzilla --location=europe-west1 --format="value(name)" || exit 1
        continue-on-error: true

      - name: Crear repositorio en Artifact Registry si no existe
        if: steps.check_repo_exists.outcome != 'success'
        run: |
          gcloud artifacts repositories create equipzilla --repository-format=docker --location=europe-west1

      - name: Obtener credenciales de Kubernetes
        run: gcloud container clusters get-credentials multi-actions --region europe-west1 --project thermal-loop-414917

      - name: Configurar credenciales de GKE
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: multi-actions
          location: europe-west1

      - name: Autenticación en Docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Construir la imagen de Docker
      - name: Compilar
        run: |-
          docker build \
          --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$GKE_REPO/$IMAGE:$IMAGE_TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Publicar la imagen de Docker en Docker Hub
      - name: Publicar
        run: |-
          docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$GKE_REPO/$IMAGE:$IMAGE_TAG"

  # # Desplegar la imagen de Docker en el clúster de GKE
  # - name: Desplegar
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   run: |-
  #     kubectl apply -f app.yaml
  #     kubectl apply -f service-node.yaml
  #     kubectl apply -f basic-ingress.yaml
  #     kubectl rollout status deployment/$DEPLOYMENT_NAME
  #     kubectl get services -o wide
